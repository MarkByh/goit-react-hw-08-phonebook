{"version":3,"file":"static/js/945.7b6882c3.chunk.js","mappings":"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","sources":["../node_modules/nanoid/index.browser.js","redux/selectors.js","webpack://react-homework-template/./src/components/ContactForm/contactForm.module.css?2173","components/ContactForm/contactForm.jsx","webpack://react-homework-template/./src/components/ContactList/contacts.module.css?016c","components/ContactList/contacts.jsx","webpack://react-homework-template/./src/components/Filter/filter.module.css?e01c","components/Filter/filter.jsx","webpack://react-homework-template/./src/pages/Contacts/contacts.module.css?eff6","pages/Contacts/Contacts.js"],"sourcesContent":["import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","\nexport const selectContacts = state => state.contacts.items;\nexport const selectFilter = state => state.filter.value;\n\n\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;","// extracted by mini-css-extract-plugin\nexport default {\"inputWrap\":\"contactForm_inputWrap__fcS1S\",\"errorDiv\":\"contactForm_errorDiv__hqzUu\",\"submitBtn\":\"contactForm_submitBtn__f7IoU\",\"input\":\"contactForm_input__wCtae\",\"form\":\"contactForm_form__3ay0L\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { Formik, Field, Form } from 'formik';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport * as Yup from 'yup';\nimport { nanoid } from 'nanoid';\nimport { addContact } from '../../redux/contactsSllice/operations';\nimport { selectContacts } from '../../redux/selectors';\nimport style from './contactForm.module.css';\n\nconst nameRegex =\n  /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/gm;\nconst numRegex =\n  /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/gm;\nconst state = {\n  name: '',\n  number: '',\n};\n\nconst Valid = Yup.object().shape({\n  name: Yup.string()\n    .min(2, 'Too Short!')\n    .max(20, 'Too Long!')\n    .matches(\n      nameRegex,\n      'Name may contain only letters, apostrophe, dash and spaces'\n    )\n    .required(),\n\n  number: Yup.string()\n    .min(5, 'Too Short!')\n    .max(12, 'Too Long!')\n    .matches(\n      numRegex,\n      'Phone number must be digits and can contain spaces, dashes, parentheses'\n    )\n    .required(),\n});\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmit = (values, actions) => {\n    const NotValidContact = contacts.find(\n      e => e.name.toLowerCase() === values.name.toLowerCase()\n    );\n    if (NotValidContact) {\n      Notify.failure(`${NotValidContact.name} is already in contacts`);\n      return;\n    }\n\n    const newContact = {\n      id: nanoid(),\n      name: values.name,\n      number: values.number,\n    };\n\n    dispatch(addContact(newContact));\n    actions.resetForm();\n  };\n\n  return (\n    <div className={style.formDiv}>\n      <Formik\n        initialValues={state}\n        onSubmit={handleSubmit}\n        validationSchema={Valid}\n      >\n        {({ errors, touched }) => (\n          <Form className={style.form}>\n            <div className={style.inputWrap}>\n              Name:\n              <Field className={style.input} type=\"text\" name=\"name\" />\n              {errors.name && touched.name ? (\n                <div className={style.errorDiv}>{errors.name}</div>\n              ) : null}\n            </div>\n\n            <div className={style.inputWrap}>\n              Phone:\n              <Field className={style.input} type=\"tel\" name=\"number\" />\n              {errors.number && touched.number ? (\n                <div className={style.errorDiv}>{errors.number}</div>\n              ) : null}\n            </div>\n\n            <button className={style.submitBtn} type=\"submit\">\n              Add contact\n            </button>\n          </Form>\n        )}\n      </Formik>\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"contact\":\"contacts_contact__I2BQe\",\"contactItem\":\"contacts_contactItem__lkdUL\",\"subButton\":\"contacts_subButton__TvVsr\",\"name\":\"contacts_name__ILFnT\"};","import { useDispatch, useSelector } from 'react-redux';\nimport style from './contacts.module.css';\nimport { deleteContact } from 'redux/contactsSllice/operations';\nimport { selectFilter, selectContacts } from 'redux/selectors';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const filterValue = useSelector(selectFilter);\n  // console.log(contacts);\n\n  const filteredContacts = () => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filterValue)\n    );\n  };\n  console.log(...filteredContacts());\n  return (\n    <ul className={style.contact}>\n      {filteredContacts().map(({ id, name, number }) => (\n        <li key={id} className={style.contactItem}>\n          <p>\n            <span className={style.name}>{name}:</span> {number}\n          </p>\n          <button\n            className={style.subButton}\n            type=\"button\"\n            onClick={() => dispatch(deleteContact(id))}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"filterInput\":\"filter_filterInput__2T6yn\",\"inputWrap\":\"filter_inputWrap__PkJkm\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/filterSlice';\nimport { selectFilter } from 'redux/selectors';\nimport style from './filter.module.css';\nexport const Filter = () => {\n  const filterValue = useSelector(selectFilter);\n  const dispatch = useDispatch();\n  const onChange = e => {\n    const value = e.target.value.toLowerCase();\n    dispatch(setFilter(value));\n  };\n\n  return (\n    <div className={style.inputWrap}>\n      Find contacts by name:\n      <input\n        className={style.filterInput}\n        type=\"text\"\n        onChange={onChange}\n        value={filterValue}\n      />\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"formDiv\":\"contacts_formDiv__LEP+G\",\"title\":\"contacts_title__8OUGU\",\"titleContacts\":\"contacts_titleContacts__3IVRE\"};","import { ContactForm } from 'components/ContactForm/contactForm';\nimport { ContactList } from 'components/ContactList/contacts';\nimport { Filter } from 'components/Filter/filter';\nimport style from './contacts.module.css'\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contactsSllice/operations';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { selectContacts, selectError, selectIsLoading, } from 'redux/selectors';\nimport Loader from '../../components/Loader/Loader'\n\nexport default function Contacts() {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n\n      <div className={style.formDiv}>\n        <h1 className={style.title}>Phone book</h1>\n        <ContactForm />\n        <h2 className={style.titleContacts}>Contacts</h2>\n\n        {contacts.length > 0 ? (\n          <div>\n            <Filter />\n            <ContactList />\n            {isLoading && !error && <Loader />}\n          </div>\n        ) : (\n          'You have no contacts'\n        )}\n      </div>\n    </>\n  );\n}\n"],"names":["nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","selectContacts","state","contacts","items","selectFilter","filter","value","selectIsLoading","isLoading","selectError","error","name","number","Valid","Yup","shape","min","max","matches","required","ContactForm","dispatch","useDispatch","useSelector","className","style","initialValues","onSubmit","values","actions","NotValidContact","find","e","toLowerCase","Notify","newContact","addContact","resetForm","validationSchema","errors","touched","type","ContactList","filterValue","filteredContacts","contact","includes","console","log","map","onClick","deleteContact","Filter","onChange","target","setFilter","Contacts","useEffect","fetchContacts","length","Loader"],"sourceRoot":""}